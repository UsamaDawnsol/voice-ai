// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

// Plan Configuration
model Plan {
  id            String   @id @default(cuid())
  name          String   @unique // 'free', 'starter', 'professional', 'enterprise'
  displayName   String   // 'Free', 'Starter', 'Professional', 'Enterprise'
  price         Float    @default(0) // Monthly price in USD
  maxConversations Int   @default(100) // Monthly conversation limit
  maxMessages   Int      @default(1000) // Monthly message limit
  features      Json     // JSON array of features
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  shopPlans     ShopPlan[]
}

// Shop Plan Subscription
model ShopPlan {
  id            String   @id @default(cuid())
  shop          String   @unique
  planId        String
  plan          Plan     @relation(fields: [planId], references: [id])
  isActive      Boolean  @default(true)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  conversationsUsed Int  @default(0) // Current month usage
  messagesUsed  Int      @default(0) // Current month usage
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Floating Chat Widget Configuration
model WidgetConfig {
  id            String   @id @default(cuid())
  shop          String   @unique
  title         String   @default("Support Chat")
  color         String   @default("#e63946")
  greeting      String   @default("ðŸ‘‹ Welcome! How can we help you?")
  position      String   @default("right") // 'left' or 'right'
  isActive      Boolean  @default(true)
  
  // Agent Persona Fields
  agentName     String?  @default("Assistant")
  agentRole     String?  @default("Customer Support")
  responseLength String? @default("medium") // 'short', 'medium', 'long'
  language      String?  @default("en")
  tone          String?  @default("friendly") // 'friendly', 'professional', 'casual'
  avatar        String?  @default("https://cdn.shopify.com/s/files/1/0780/7745/0100/files/default-avatar.png")
  
  // Agent Style Fields
  colorScheme   String?  @default("0") // Color scheme index
  startColor    String?  @default("#000000CF") // Gradient start color
  endColor      String?  @default("#000000") // Gradient end color
  chatBgColor   String?  @default("#FFFFFF") // Chat background color
  fontFamily    String?  @default("inter, sans-serif") // Font family
  fontColor     String?  @default("#000000CF") // Font color
  openByDefault String?  @default("1") // When to open chat (0=never, 1=always, 5000=5s, 10000=10s)
  isPulsing     Boolean? @default(false) // Pulsing animation
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Conversation History
model Conversation {
  id        String   @id @default(cuid())
  shop      String
  sessionId String?  // For anonymous users
  userId    String?  // For logged-in users
  customerEmail String? // Customer email if available
  customerName  String? // Customer name if available
  status    String   @default("active") // 'active', 'closed', 'archived'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  messages  Message[]
  
  @@index([shop])
  @@index([sessionId])
  @@index([userId])
}

// Individual Messages in Conversations
model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // 'user', 'assistant', 'system'
  content        String
  metadata       String?  // JSON string for additional data
  timestamp      DateTime @default(now())
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([timestamp])
}